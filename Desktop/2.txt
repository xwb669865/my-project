1 移动端适配
      
    固定一个某些宽度，使用一个模式，加上少许的媒体查询方案
    使用flexbox解决方案
    使用百分比加媒体查询
    使用rem
    动态设置meta viewpoint

2 flex布局问题 
     什么是display：flex呢
          flex是 flexible  box的缩写，意为弹性布局 ；这个东西的引入，为盒模型提供了最大的灵活性！可以相应式的实现各种页面的布局。
     基本概念：采用flex布局的元素，称为flex容器(flex   container)，简称容器。    在这个容器中默认存在两个轴：水平方向的主轴（main axis）和 垂直方向上的交叉轴（cross axis）
        flex-direction   容器项目的排列方向（默认是横向排列）
        flex-wrap      容器内项目的换行方式
        flex-flow      flex-direction 和 flex-wrap 属性的复合属性。
        justify-content   项目在主轴上对齐样式
        align-item　　项目在交叉轴上如何对齐
        align-content   定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用

     
3 css布局 两列布局 三列布局
          三列布局 ：
           1 左右两边设置position：absolute；和top:0;left:0;right:0;中间设置margin-left和margin-right即可.。
           2 将父元素box设为display:flex;可将box设置为弹性盒模型进行布局。
           3 让左右元素浮动，缺点是中间元素必须置于二者之后，不然right元素会进入下一行。
           4 

4 居中布局
      1 div{
           width:600px;
          height: 600px;
          background:red;
          position: absolute;
          left:50%;
          top:50%;
          margin-left:-300px;
          margin-top:-300px;
} 
      2  利用CSS的margin设置为auto让浏览器自己帮我们水平和垂直居中
           .mycss{
              position: absolute;
              left: 0px;
             right: 0;
             top: 0;
             bottom: 0;
            margin: auto;
           height: 200px;
           width: 300px;
}；

       3 .test{
             position: absolute; 
             left: 50%;
             top: 50%;
            margin: -50px 0 0 -50px; // 已知宽高
            // transform: translate(-50%,-50%); // 未知宽高
            }
        4 



4 setTimeout的this指向，为什么 
       setTimeout的常见用法是让某个方法延迟执行。我们知道，setTimeout方法是挂在window对象下的。《JavaScript高级程序设计》第二版中，写到：“超时调用的代码都是在全局作用域中执行的，因此函数中this的值在非严格模式下指向window对象，在严格模式下是undefined”。在这里，我们只讨论非严格模式。

5 前端安全  xss和csrf 
         
        
6 react diff算法
       
7 dns解析过程
        ①用户主机上运行着DNS的客户端，就是我们的PC机或者手机客户端运行着DNS客户端了
        ②浏览器将接收到的url中抽取出域名字段，就是访问的主机名，比如http://www.baidu.com/
        ③DNS客户机端向DNS服务器端发送一份查询报文，报文中包含着要访问的主机名字段（中间包括一些列缓存查询以及分布式DNS集群的工作）
        ④该DNS客户机最终会收到一份回答报文，其中包含有该主机名对应的IP地址
        ⑤一旦该浏览器收到来自DNS的IP地址，就可以向该IP地址定位的HTTP服务器发起TCP连接

8 函数节流与防抖 
9 浏览器劫持
        浏览器劫持是一种恶意程序，通过浏览器插件、BHO（浏览器辅助对象）、Winsock LSP等形式对用户的浏览器进行篡改，使用户的浏览器配置不正常，被强行引导到商业网站。 所谓浏览器劫持是指网页浏览器（IE等）被恶意程序修改。常见现象为主页及互联网搜索页变为不知名的网站、经常莫名弹出广告网页输入正常网站地址却连接到其他网站。收藏夹内被自动添加陌生网站地址等等。
10 浏览器兼容性？
        兼容问题集合
             不同浏览器的标签默认的外补丁和内补丁不同
             块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大
             设置较小高度标签（一般小于10px），在ie6，ie7，遨游中高度超出自己设置高度
             行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，ie6间距bug（类似第二种）
             图片默认有间距
             标签最低高度设置min-height不兼容
             透明度的兼容css设置
  
11 如果用户说页面白屏那么可能是哪些问题？
       1、先确保网络连接通畅。
       2、查看网络url地址是否输入有误。
       3、打开控制台查看报错信息。
       4、查看接口访问是否有请求。
       5、查看路由是否有path或者name的错误，导致加载了不存在的页面。

12 ajax的状态0-4每个代表什么 
          
    0 表示xhr被创建，但尚未使用xhr.open()方法
    1 表示open() 方法被调用，建立了连接
    2 表示send() 方法被调用，并取得了响应的状态值和响应头。
    3 表示响应体正在下载中
    4 表示下载体已经完成，可以直接使用responseText

13 JQuery与Vue的区别
        1JQuery是一个JS库，vue是一个框架
        2 Vue 是数据和视图的分离，jq的数据与视图混在一块
        3 jq直接用js修改视图，Vue以数据驱动视图

14 vuex介绍一下 
        Vuex是一个专为vue.js应用程序开发的状态管理模式。当我们构建一个中大型的单页面应用程序时，Vuex可以更好的帮助我们在组件外部统一管理状态。
        Vuex的五个核心概念
            State
            Getters
            Mutations
            Actions
            Modules

15 redux介绍一下 
        Redux是针对JavaScript应用的可预测状态容器

16 快速排序思想实现一个快排
         快速排序”的思想很简单，整个排序过程只需要三步：
           （1）在数据集之中，找一个基准点
           （2）建立两个数组，分别存储左边和右边的数组
           （3）利用递归进行下次比较

17 TCP 为什么是可靠的
        因为tcp有重传机制，拥塞控制，流量控制机制。
18 react 生命周期
        componentWillMount 在渲染前调用,在客户端也在服务端。
        componentDidMount : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异步操作阻塞UI)。
        componentWillReceiveProps 在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化render时不会被调用。
        shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。
    可以在你确认不需要更新组件时使用。
        componentWillUpdate在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。
        componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用。
        componentWillUnmount在组件从 DOM 中移除之前立刻被调用。

19 vue生命周期 模板渲染在哪个生命周期 
        完成模板中的html渲染到html页面中。此过程中进行ajax交互
20 vue生命周期
        Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。

        beforeCreate（创建前），在数据观测和初始化事件还未开始
        created（创建后），完成数据观测，属性和方法的运算，初始化事件， $el 属性还没有显示出来
        beforeMount（载入前），在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。
        mounted（载入后），在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。
        beforeUpdate（更新前），在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。
        updated（更新后），在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。
       beforeDestroy（销毁前），在实例销毁之前调用。实例仍然完全可用。
       destroyed（销毁后），在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。

21 margin重叠 怎么解决
       外层元素padding代替
      外层元素 overflow:hidden;
      内层元素绝对定位 postion:absolute:
      内层元素 加float:left;或display:inline-block;
      内层元素padding:1px;
      内层元素透明边框 border:1px solid transparent;
22 如何清除浮动
       给浮动元素的父元素添加高度（扩展性不好）
       clear:both
       给父元素使用overflow:hidden
       
23 HTML5 WebSocket
        WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。
        
       WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。

在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。

24 调试方法
       1 用alert（）`弹出消息。
       2 使用`console.log（）`将行记录到控制台。
       3 使用`debugger`暂停代码执行。
       4 Chrome开发者工具
       5 Firefox开发者工具

25 数组的方法
         1push()：方法可向数组的末尾添加一个或多个元素，并返回新的长度。
         2pop()：方法用于删除并返回数组的最后一个元素。
         3shift()：方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。
         4unshift()：方法可向数组的开头添加一个或更多元素，并返回新的长度。
         5concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。
         6splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目
         7Array.isArray()判断一个对象是不是数组，返回的是布尔值
       新增数组方法
           forEach()：就是遍历数组的所有元素，需要注意的就是此方法不会改变原数组。
           map()：map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。
           filter()：filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。
           some()：ome() 方法用于检测数组中的元素是否满足指定条件（函数提供）。
           every()：every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。
           

 

          // 1. 改变原数组
arr.push();
arr.pop();
arr.unshift();
arr.shift();
arr.reverse();
arr.solice();
arr.sort();
arr.copyWithin();
 
// 2. 不改变原数组
arr.concat();
arr.toString();
arr.slice();
arr.join();
arr.split();
arr.forEach();
arr.map();
arr.filter();
arr.some();
arr.every();
arr.concat();
 
 27 
























